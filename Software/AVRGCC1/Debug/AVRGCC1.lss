
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800100  00800100  000005d8  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000012d  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9d  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000310  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000813  00000000  00000000  00001d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000221  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027c  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000070  00000000  00000000  00002aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_1>
   8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_2>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

00000068 <msg_bem>:
  68:	42 65 6d 20 20 20 20 00 00                          Bem    ..

00000071 <msg_vindo>:
  71:	56 69 6e 64 6f 20 21 21 21 20 20 20 20 20 20 20     Vindo !!!       
  81:	20 20 20 20 20 00 00                                     ..

00000088 <msg_pronto>:
  88:	20 20 20 20 50 72 6f 6e 74 6f 21 20 20 20 20 20         Pronto!     
	...

0000009a <msg_cronometrando>:
  9a:	43 72 6f 6e 6f 6d 65 74 72 61 6e 64 6f 2e 2e 2e     Cronometrando...
  aa:	20 20 20 20 20 00 00                                     ..

000000b1 <msg_tqueda>:
  b1:	54 65 6d 70 6f 20 64 65 20 51 75 65 64 61 3a 20     Tempo de Queda: 
  c1:	20 20 20 20 00 00                                       ..

000000c7 <msg_erro>:
  c7:	20 20 20 20 20 45 52 52 4f 21 20 20 20 20 20 20          ERRO!      
	...

000000d9 <msg_limp>:
  d9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
  e9:	00 00 00                                            ...

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d8 e0       	ldi	r29, 0x08	; 8
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_clear_bss>:
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 30       	cpi	r26, 0x0B	; 11
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 10c:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
	#define BBN PD4
	
	
//--------------------------------------------------------------------------------------
int main()
{	unsigned char digitos[tam_vetor];	//declaração da variável para armazenagem dos digitos
 114:	2f 92       	push	r2
 116:	3f 92       	push	r3
 118:	4f 92       	push	r4
 11a:	5f 92       	push	r5
 11c:	6f 92       	push	r6
 11e:	7f 92       	push	r7
 120:	8f 92       	push	r8
 122:	9f 92       	push	r9
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x26>
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x28>
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	

	DDRD = 0b11110000;          //Pinos de entrada
 142:	80 ef       	ldi	r24, 0xF0	; 240
 144:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0b00000011;			//habilita o pull-up		 
 146:	03 e0       	ldi	r16, 0x03	; 3
 148:	0b b9       	out	0x0b, r16	; 11
	DDRB=  0b00111111;				//PORTD como saída (display)
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	84 b9       	out	0x04, r24	; 4
	PORTB= 0b00000000;				//desliga o display
 14e:	15 b8       	out	0x05, r1	; 5
	    
	inic_LCD_4bits();				//inicializa o LCD
 150:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <inic_LCD_4bits>
	cmd_LCD(0x01,0); 				//desloca cursor para a segunda linha
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
	
   
   
   //Interrupção INT0 e INT1
   EICRA= 0b00001010;
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	80 93 69 00 	sts	0x0069, r24
   EIMSK= 0b00000011;
 162:	0d bb       	out	0x1d, r16	; 29
   
   //Timer 1
   TCCR1A= 0b00000000;
 164:	10 92 80 00 	sts	0x0080, r1
   TCCR1B= 0b00000101;
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	80 93 81 00 	sts	0x0081, r24
   TIMSK1= 0b00000000;
 16e:	10 92 6f 00 	sts	0x006F, r1
		
   
   case 1:{cli();
	       queda=0;
          cmd_LCD(0x80,0); 
		  escreve_LCD_Flash(msg_pronto);
 172:	0f 2e       	mov	r0, r31
 174:	f8 e8       	ldi	r31, 0x88	; 136
 176:	cf 2e       	mov	r12, r31
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	df 2e       	mov	r13, r31
 17c:	f0 2d       	mov	r31, r0
		  cmd_LCD(0xc0,0); 
		  escreve_LCD_Flash(msg_limp);
 17e:	0f 2e       	mov	r0, r31
 180:	f9 ed       	ldi	r31, 0xD9	; 217
 182:	af 2e       	mov	r10, r31
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	bf 2e       	mov	r11, r31
 188:	f0 2d       	mov	r31, r0
		  set_bit(PORTD, BBN);						//Ativa a bobina
          if(!tst_bit(PIND,BT1)) { while(!tst_bit(PIND,BT1)); estado=2;}	//Testa o botão de inicio
 18a:	ee 24       	eor	r14, r14
 18c:	68 94       	set
 18e:	e1 f8       	bld	r14, 1
	while (1)
	{
	 switch(estado)
 {   
   case 0:{cmd_LCD(0x84,0);	
		  escreve_LCD_Flash(msg_bem);
 190:	0f 2e       	mov	r0, r31
 192:	f8 e6       	ldi	r31, 0x68	; 104
 194:	8f 2e       	mov	r8, r31
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	9f 2e       	mov	r9, r31
 19a:	f0 2d       	mov	r31, r0
		  cmd_LCD(0xC5,0);	
		  escreve_LCD_Flash(msg_vindo);
 19c:	0f 2e       	mov	r0, r31
 19e:	f1 e7       	ldi	r31, 0x71	; 113
 1a0:	6f 2e       	mov	r6, r31
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	7f 2e       	mov	r7, r31
 1a6:	f0 2d       	mov	r31, r0
		  _delay_ms(2000);
		   estado=1; cmd_LCD(0x01,0);	  
 1a8:	ff 24       	eor	r15, r15
 1aa:	f3 94       	inc	r15
          if(!tst_bit(PIND,BT1)) { while(!tst_bit(PIND,BT1)); estado=2;}	//Testa o botão de inicio
			  break;}
                                
									 
   case 2:{cmd_LCD(0x80,0);	
		  escreve_LCD_Flash(msg_cronometrando);
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fa e9       	ldi	r31, 0x9A	; 154
 1b0:	4f 2e       	mov	r4, r31
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	5f 2e       	mov	r5, r31
 1b6:	f0 2d       	mov	r31, r0
		   if(!tst_bit(PIND,BT2)) {while(!tst_bit(PIND,BT1)); estado=1;}    	//Testa o botão de Reset*/					//Desativa a bobina
		  break;}
		 
			  
   case 3:{cmd_LCD(0x80,0); 	 cli();
                                 escreve_LCD_Flash(msg_tqueda);
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f1 eb       	ldi	r31, 0xB1	; 177
 1bc:	2f 2e       	mov	r2, r31
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	3f 2e       	mov	r3, r31
 1c2:	f0 2d       	mov	r31, r0
                                 ident_num(queda,digitos);
 1c4:	8e 01       	movw	r16, r28
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
   TIMSK1= 0b00000000;
    
   
	while (1)
	{
	 switch(estado)
 1ca:	80 91 0a 01 	lds	r24, 0x010A
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	31 f1       	breq	.+76     	; 0x21e <main+0x10a>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	30 f0       	brcs	.+12     	; 0x1e2 <main+0xce>
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	09 f4       	brne	.+2      	; 0x1dc <main+0xc8>
 1da:	40 c0       	rjmp	.+128    	; 0x25c <main+0x148>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	b9 f7       	brne	.-18     	; 0x1ce <main+0xba>
 1e0:	4d c0       	rjmp	.+154    	; 0x27c <main+0x168>
 {   
   case 0:{cmd_LCD(0x84,0);	
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  escreve_LCD_Flash(msg_bem);
 1ea:	c4 01       	movw	r24, r8
 1ec:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
		  cmd_LCD(0xC5,0);	
 1f0:	85 ec       	ldi	r24, 0xC5	; 197
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  escreve_LCD_Flash(msg_vindo);
 1f8:	c3 01       	movw	r24, r6
 1fa:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	97 ea       	ldi	r25, 0xA7	; 167
 202:	a1 e6       	ldi	r26, 0x61	; 97
 204:	81 50       	subi	r24, 0x01	; 1
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	a0 40       	sbci	r26, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0xf0>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0xfa>
 20e:	00 00       	nop
		  _delay_ms(2000);
		   estado=1; cmd_LCD(0x01,0);	  
 210:	f0 92 0a 01 	sts	0x010A, r15
 214:	8f 2d       	mov	r24, r15
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  break;}
 21c:	d6 cf       	rjmp	.-84     	; 0x1ca <main+0xb6>
		
   
   case 1:{cli();
 21e:	f8 94       	cli
	       queda=0;
 220:	10 92 06 01 	sts	0x0106, r1
 224:	10 92 07 01 	sts	0x0107, r1
 228:	10 92 08 01 	sts	0x0108, r1
 22c:	10 92 09 01 	sts	0x0109, r1
          cmd_LCD(0x80,0); 
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  escreve_LCD_Flash(msg_pronto);
 238:	c6 01       	movw	r24, r12
 23a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
		  cmd_LCD(0xc0,0); 
 23e:	80 ec       	ldi	r24, 0xC0	; 192
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  escreve_LCD_Flash(msg_limp);
 246:	c5 01       	movw	r24, r10
 248:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
		  set_bit(PORTD, BBN);						//Ativa a bobina
 24c:	5c 9a       	sbi	0x0b, 4	; 11
          if(!tst_bit(PIND,BT1)) { while(!tst_bit(PIND,BT1)); estado=2;}	//Testa o botão de inicio
 24e:	48 99       	sbic	0x09, 0	; 9
 250:	bc cf       	rjmp	.-136    	; 0x1ca <main+0xb6>
 252:	48 9b       	sbis	0x09, 0	; 9
 254:	fe cf       	rjmp	.-4      	; 0x252 <main+0x13e>
 256:	e0 92 0a 01 	sts	0x010A, r14
 25a:	b7 cf       	rjmp	.-146    	; 0x1ca <main+0xb6>
			  break;}
                                
									 
   case 2:{cmd_LCD(0x80,0);	
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
		  escreve_LCD_Flash(msg_cronometrando);
 264:	c2 01       	movw	r24, r4
 266:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
		  sei();	                            //Habilita as Interrupições
 26a:	78 94       	sei
		  clr_bit(PORTD,BBN);
 26c:	5c 98       	cbi	0x0b, 4	; 11
		   if(!tst_bit(PIND,BT2)) {while(!tst_bit(PIND,BT1)); estado=1;}    	//Testa o botão de Reset*/					//Desativa a bobina
 26e:	49 99       	sbic	0x09, 1	; 9
 270:	ac cf       	rjmp	.-168    	; 0x1ca <main+0xb6>
 272:	48 9b       	sbis	0x09, 0	; 9
 274:	fe cf       	rjmp	.-4      	; 0x272 <main+0x15e>
 276:	f0 92 0a 01 	sts	0x010A, r15
 27a:	a7 cf       	rjmp	.-178    	; 0x1ca <main+0xb6>
		  break;}
		 
			  
   case 3:{cmd_LCD(0x80,0); 	 cli();
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
 284:	f8 94       	cli
                                 escreve_LCD_Flash(msg_tqueda);
 286:	c1 01       	movw	r24, r2
 288:	0e 94 74 02 	call	0x4e8	; 0x4e8 <escreve_LCD_Flash>
                                 ident_num(queda,digitos);
 28c:	a6 e0       	ldi	r26, 0x06	; 6
 28e:	b1 e0       	ldi	r27, 0x01	; 1
 290:	8d 91       	ld	r24, X+
 292:	9c 91       	ld	r25, X
 294:	b8 01       	movw	r22, r16
 296:	0e 94 89 02 	call	0x512	; 0x512 <ident_num>
			                     cmd_LCD(0xC6,0);			//desloca o cursor para que os 3 digitos fiquem a direita do LCD
 29a:	86 ec       	ldi	r24, 0xC6	; 198
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD(digitos[4],1);
 2a2:	8d 81       	ldd	r24, Y+5	; 0x05
 2a4:	6f 2d       	mov	r22, r15
 2a6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD(digitos[3],1);							 
 2aa:	8c 81       	ldd	r24, Y+4	; 0x04
 2ac:	6f 2d       	mov	r22, r15
 2ae:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
								 cmd_LCD(digitos[2],1);
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	6f 2d       	mov	r22, r15
 2b6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD(digitos[1],1);
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	6f 2d       	mov	r22, r15
 2be:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
								 cmd_LCD('.',1);
 2c2:	8e e2       	ldi	r24, 0x2E	; 46
 2c4:	6f 2d       	mov	r22, r15
 2c6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD(digitos[0],1);
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	6f 2d       	mov	r22, r15
 2ce:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
								 cmd_LCD(' ',1);
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	6f 2d       	mov	r22, r15
 2d6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD('m',1);
 2da:	8d e6       	ldi	r24, 0x6D	; 109
 2dc:	6f 2d       	mov	r22, r15
 2de:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
			                     cmd_LCD('s',1);
 2e2:	83 e7       	ldi	r24, 0x73	; 115
 2e4:	6f 2d       	mov	r22, r15
 2e6:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
     
		  if(!tst_bit(PIND,BT2)) { while(!tst_bit(PIND,BT1));estado=1;}
 2ea:	49 99       	sbic	0x09, 1	; 9
 2ec:	6e cf       	rjmp	.-292    	; 0x1ca <main+0xb6>
 2ee:	48 9b       	sbis	0x09, 0	; 9
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <main+0x1da>
 2f2:	f0 92 0a 01 	sts	0x010A, r15
 2f6:	69 cf       	rjmp	.-302    	; 0x1ca <main+0xb6>

000002f8 <__vector_1>:
		
}
//======================================================================================	

ISR(INT0_vect)
{ TCNT1=0;}	
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	10 92 85 00 	sts	0x0085, r1
 306:	10 92 84 00 	sts	0x0084, r1
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_2>:

ISR(INT1_vect)
{tm1=TCNT1;
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	e4 e8       	ldi	r30, 0x84	; 132
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
 332:	90 93 05 01 	sts	0x0105, r25
 336:	80 93 04 01 	sts	0x0104, r24
 tempo = ((float)TCNT1*0,000064);
 33a:	80 81       	ld	r24, Z
 33c:	91 81       	ldd	r25, Z+1	; 0x01
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	a0 e5       	ldi	r26, 0x50	; 80
 344:	b2 e4       	ldi	r27, 0x42	; 66
 346:	80 93 00 01 	sts	0x0100, r24
 34a:	90 93 01 01 	sts	0x0101, r25
 34e:	a0 93 02 01 	sts	0x0102, r26
 352:	b0 93 03 01 	sts	0x0103, r27
 queda = tempo*10000;
 356:	80 e4       	ldi	r24, 0x40	; 64
 358:	9f ee       	ldi	r25, 0xEF	; 239
 35a:	a7 e0       	ldi	r26, 0x07	; 7
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	80 93 06 01 	sts	0x0106, r24
 362:	90 93 07 01 	sts	0x0107, r25
 366:	a0 93 08 01 	sts	0x0108, r26
 36a:	b0 93 09 01 	sts	0x0109, r27
 estado=3;	
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 0a 01 	sts	0x010A, r24
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <cmd_LCD>:
//---------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)				//c é o dado  e cd indica se é instrução ou caractere
{
	if(cd==0)
 38a:	66 23       	and	r22, r22
 38c:	11 f4       	brne	.+4      	; 0x392 <cmd_LCD+0x8>
		clr_bit(CONTR_LCD,RS);
 38e:	2d 98       	cbi	0x05, 5	; 5
 390:	01 c0       	rjmp	.+2      	; 0x394 <cmd_LCD+0xa>
	else
		set_bit(CONTR_LCD,RS);
 392:	2d 9a       	sbi	0x05, 5	; 5

	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F)|(0xF0 & c);		
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	
 394:	95 b1       	in	r25, 0x05	; 5
 396:	28 2f       	mov	r18, r24
 398:	22 95       	swap	r18
 39a:	2f 70       	andi	r18, 0x0F	; 15
 39c:	90 7f       	andi	r25, 0xF0	; 240
 39e:	92 2b       	or	r25, r18
 3a0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	95 e0       	ldi	r25, 0x05	; 5
 3a4:	9a 95       	dec	r25
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <cmd_LCD+0x1a>
 3a8:	00 00       	nop
	#endif
	
	pulso_enable();
 3aa:	2c 9a       	sbi	0x05, 4	; 5
 3ac:	95 e0       	ldi	r25, 0x05	; 5
 3ae:	9a 95       	dec	r25
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <cmd_LCD+0x24>
 3b2:	00 00       	nop
 3b4:	2c 98       	cbi	0x05, 4	; 5
 3b6:	90 ef       	ldi	r25, 0xF0	; 240
 3b8:	9a 95       	dec	r25
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <cmd_LCD+0x2e>

	//segundo nibble de dados - 4 LSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c<<4));		
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
 3bc:	95 b1       	in	r25, 0x05	; 5
 3be:	28 2f       	mov	r18, r24
 3c0:	2f 70       	andi	r18, 0x0F	; 15
 3c2:	90 7f       	andi	r25, 0xF0	; 240
 3c4:	92 2b       	or	r25, r18
 3c6:	95 b9       	out	0x05, r25	; 5
 3c8:	95 e0       	ldi	r25, 0x05	; 5
 3ca:	9a 95       	dec	r25
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <cmd_LCD+0x40>
 3ce:	00 00       	nop
	#endif
	
	pulso_enable();
 3d0:	2c 9a       	sbi	0x05, 4	; 5
 3d2:	95 e0       	ldi	r25, 0x05	; 5
 3d4:	9a 95       	dec	r25
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <cmd_LCD+0x4a>
 3d8:	00 00       	nop
 3da:	2c 98       	cbi	0x05, 4	; 5
 3dc:	90 ef       	ldi	r25, 0xF0	; 240
 3de:	9a 95       	dec	r25
 3e0:	f1 f7       	brne	.-4      	; 0x3de <cmd_LCD+0x54>
	
	if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza espera LCD estar pronto
 3e2:	66 23       	and	r22, r22
 3e4:	41 f4       	brne	.+16     	; 0x3f6 <cmd_LCD+0x6c>
 3e6:	84 30       	cpi	r24, 0x04	; 4
 3e8:	30 f4       	brcc	.+12     	; 0x3f6 <cmd_LCD+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8f e3       	ldi	r24, 0x3F	; 63
 3ec:	9f e1       	ldi	r25, 0x1F	; 31
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <cmd_LCD+0x64>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <cmd_LCD+0x6a>
 3f4:	00 00       	nop
 3f6:	08 95       	ret

000003f8 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 3f8:	2d 98       	cbi	0x05, 5	; 5
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 3fa:	2c 98       	cbi	0x05, 4	; 5
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	99 ef       	ldi	r25, 0xF9	; 249
 400:	a0 e0       	ldi	r26, 0x00	; 0
 402:	81 50       	subi	r24, 0x01	; 1
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	a0 40       	sbci	r26, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <inic_LCD_4bits+0xa>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <inic_LCD_4bits+0x14>
 40c:	00 00       	nop
							//ser maior). 
	//interface de 8 bits						
	#if (nibble_dados)
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;		
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;		
 40e:	85 b1       	in	r24, 0x05	; 5
 410:	80 7f       	andi	r24, 0xF0	; 240
 412:	83 60       	ori	r24, 0x03	; 3
 414:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	95 e0       	ldi	r25, 0x05	; 5
 418:	9a 95       	dec	r25
 41a:	f1 f7       	brne	.-4      	; 0x418 <inic_LCD_4bits+0x20>
 41c:	00 00       	nop
	#endif						
							
	pulso_enable();			//habilitação respeitando os tempos de resposta do LCD
 41e:	2c 9a       	sbi	0x05, 4	; 5
 420:	a5 e0       	ldi	r26, 0x05	; 5
 422:	aa 95       	dec	r26
 424:	f1 f7       	brne	.-4      	; 0x422 <inic_LCD_4bits+0x2a>
 426:	00 00       	nop
 428:	2c 98       	cbi	0x05, 4	; 5
 42a:	b0 ef       	ldi	r27, 0xF0	; 240
 42c:	ba 95       	dec	r27
 42e:	f1 f7       	brne	.-4      	; 0x42c <inic_LCD_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	9e e4       	ldi	r25, 0x4E	; 78
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <inic_LCD_4bits+0x3c>
 438:	00 c0       	rjmp	.+0      	; 0x43a <inic_LCD_4bits+0x42>
 43a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	95 e0       	ldi	r25, 0x05	; 5
 43e:	9a 95       	dec	r25
 440:	f1 f7       	brne	.-4      	; 0x43e <inic_LCD_4bits+0x46>
 442:	00 00       	nop
	_delay_ms(5);		
	pulso_enable();
 444:	2c 9a       	sbi	0x05, 4	; 5
 446:	a5 e0       	ldi	r26, 0x05	; 5
 448:	aa 95       	dec	r26
 44a:	f1 f7       	brne	.-4      	; 0x448 <inic_LCD_4bits+0x50>
 44c:	00 00       	nop
 44e:	2c 98       	cbi	0x05, 4	; 5
 450:	b0 ef       	ldi	r27, 0xF0	; 240
 452:	ba 95       	dec	r27
 454:	f1 f7       	brne	.-4      	; 0x452 <inic_LCD_4bits+0x5a>
 456:	8f e1       	ldi	r24, 0x1F	; 31
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <inic_LCD_4bits+0x62>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <inic_LCD_4bits+0x68>
 460:	00 00       	nop
 462:	95 e0       	ldi	r25, 0x05	; 5
 464:	9a 95       	dec	r25
 466:	f1 f7       	brne	.-4      	; 0x464 <inic_LCD_4bits+0x6c>
 468:	00 00       	nop
	_delay_us(200);
	pulso_enable();	/*até aqui ainda é uma interface de 8 bits.
 46a:	2c 9a       	sbi	0x05, 4	; 5
 46c:	a5 e0       	ldi	r26, 0x05	; 5
 46e:	aa 95       	dec	r26
 470:	f1 f7       	brne	.-4      	; 0x46e <inic_LCD_4bits+0x76>
 472:	00 00       	nop
 474:	2c 98       	cbi	0x05, 4	; 5
 476:	b0 ef       	ldi	r27, 0xF0	; 240
 478:	ba 95       	dec	r27
 47a:	f1 f7       	brne	.-4      	; 0x478 <inic_LCD_4bits+0x80>
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados) 
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;		
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	80 7f       	andi	r24, 0xF0	; 240
 480:	82 60       	ori	r24, 0x02	; 2
 482:	85 b9       	out	0x05, r24	; 5
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <inic_LCD_4bits+0x8e>
 48a:	00 00       	nop
	#endif
	
	pulso_enable();		
 48c:	2c 9a       	sbi	0x05, 4	; 5
 48e:	95 e0       	ldi	r25, 0x05	; 5
 490:	9a 95       	dec	r25
 492:	f1 f7       	brne	.-4      	; 0x490 <inic_LCD_4bits+0x98>
 494:	00 00       	nop
 496:	2c 98       	cbi	0x05, 4	; 5
 498:	a0 ef       	ldi	r26, 0xF0	; 240
 49a:	aa 95       	dec	r26
 49c:	f1 f7       	brne	.-4      	; 0x49a <inic_LCD_4bits+0xa2>
   	cmd_LCD(0x28,0); 		//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 49e:	88 e2       	ldi	r24, 0x28	; 40
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
							//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(0x08,0);		//desliga o display
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
   	cmd_LCD(0x01,0);		//limpa todo o display
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
   	cmd_LCD(0x0C,0);		//mensagem aparente cursor inativo não piscando   
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
}
 4c6:	08 95       	ret

000004c8 <escreve_LCD>:
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD -  dados armazenados na RAM
//---------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) cmd_LCD(*c,1);
 4ce:	88 81       	ld	r24, Y
 4d0:	88 23       	and	r24, r24
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <escreve_LCD+0x1a>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
}
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD -  dados armazenados na RAM
//---------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
 4d4:	21 96       	adiw	r28, 0x01	; 1
{
   for (; *c!=0;c++) cmd_LCD(*c,1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
 4dc:	89 91       	ld	r24, Y+
 4de:	88 23       	and	r24, r24
 4e0:	d1 f7       	brne	.-12     	; 0x4d6 <escreve_LCD+0xe>
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <escreve_LCD_Flash>:
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD - dados armazenados na FLASH
//---------------------------------------------------------------------------------------------
void escreve_LCD_Flash(const char *c)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) cmd_LCD(pgm_read_byte(&(*c)),1);
 4ee:	fe 01       	movw	r30, r28
 4f0:	24 91       	lpm	r18, Z+
 4f2:	22 23       	and	r18, r18
 4f4:	59 f0       	breq	.+22     	; 0x50c <escreve_LCD_Flash+0x24>
 4f6:	fc 01       	movw	r30, r24
 4f8:	84 91       	lpm	r24, Z+
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 c5 01 	call	0x38a	; 0x38a <cmd_LCD>
 500:	21 96       	adiw	r28, 0x01	; 1
 502:	ce 01       	movw	r24, r28
 504:	fe 01       	movw	r30, r28
 506:	24 91       	lpm	r18, Z+
 508:	22 23       	and	r18, r18
 50a:	a9 f7       	brne	.-22     	; 0x4f6 <escreve_LCD_Flash+0xe>
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <ident_num>:
//---------------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 512:	fb 01       	movw	r30, r22
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 
 514:	20 e3       	ldi	r18, 0x30	; 48
 516:	20 83       	st	Z, r18
 518:	21 83       	std	Z+1, r18	; 0x01
 51a:	22 83       	std	Z+2, r18	; 0x02
 51c:	23 83       	std	Z+3, r18	; 0x03
 51e:	24 83       	std	Z+4, r18	; 0x04

	do
	{
       *disp = (valor%10) + conv_ascii;	//pega o resto da divisao por 10 
 520:	2a e0       	ldi	r18, 0x0A	; 10
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	0e 94 9c 02 	call	0x538	; 0x538 <__udivmodhi4>
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	81 93       	st	Z+, r24
	   valor /=10;						//pega o inteiro da divisão por 10
 52e:	86 2f       	mov	r24, r22
 530:	97 2f       	mov	r25, r23
	   disp++;

	}while (valor!=0);
 532:	00 97       	sbiw	r24, 0x00	; 0
 534:	b9 f7       	brne	.-18     	; 0x524 <ident_num+0x12>
}
 536:	08 95       	ret

00000538 <__udivmodhi4>:
 538:	aa 1b       	sub	r26, r26
 53a:	bb 1b       	sub	r27, r27
 53c:	51 e1       	ldi	r21, 0x11	; 17
 53e:	07 c0       	rjmp	.+14     	; 0x54e <__udivmodhi4_ep>

00000540 <__udivmodhi4_loop>:
 540:	aa 1f       	adc	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	a6 17       	cp	r26, r22
 546:	b7 07       	cpc	r27, r23
 548:	10 f0       	brcs	.+4      	; 0x54e <__udivmodhi4_ep>
 54a:	a6 1b       	sub	r26, r22
 54c:	b7 0b       	sbc	r27, r23

0000054e <__udivmodhi4_ep>:
 54e:	88 1f       	adc	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	5a 95       	dec	r21
 554:	a9 f7       	brne	.-22     	; 0x540 <__udivmodhi4_loop>
 556:	80 95       	com	r24
 558:	90 95       	com	r25
 55a:	bc 01       	movw	r22, r24
 55c:	cd 01       	movw	r24, r26
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
